definitions:
  models.AccessTokenUpdateReq:
    properties:
      refresh_token:
        type: string
    type: object
  models.AccessTokenUpdateResp:
    properties:
      access_token:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  models.AddPolicyRequest:
    properties:
      policy:
        $ref: '#/definitions/models.Policy'
    type: object
  models.AdminLoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.AdminLoginResp:
    properties:
      access_token:
        type: string
    type: object
  models.AdminReq:
    properties:
      age:
        type: integer
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  models.AllUsers:
    properties:
      users:
        items:
          $ref: '#/definitions/models.UserWithPostsAndComments'
        type: array
    type: object
  models.Comment:
    properties:
      content:
        type: string
      id:
        type: string
      owner_id:
        type: string
      post_id:
        type: string
    type: object
  models.CommentLike:
    properties:
      comment_id:
        type: string
      user_id:
        type: string
    type: object
  models.Comments:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
    type: object
  models.DeleteAdmin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.ListRolePolicyResp:
    properties:
      policies:
        items:
          $ref: '#/definitions/models.Policy'
        type: array
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
    type: object
  models.Policy:
    properties:
      endpoint:
        type: string
      method:
        type: string
      role:
        type: string
    type: object
  models.Post:
    properties:
      id:
        type: string
      image_url:
        type: string
      owner_id:
        type: string
      title:
        type: string
    type: object
  models.PostLike:
    properties:
      post_id:
        type: string
      user_id:
        type: string
    type: object
  models.Posts:
    properties:
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
    type: object
  models.RbacAllRolesResp:
    properties:
      roles:
        items:
          type: string
        type: array
    type: object
  models.RegisterRespUser:
    properties:
      message:
        type: string
    type: object
  models.RespPost:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      id:
        type: string
      image_url:
        type: string
      owner_id:
        type: string
      title:
        type: string
    type: object
  models.ResponseLikeComment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      likes:
        items:
          $ref: '#/definitions/models.User'
        type: array
      owner_id:
        type: string
      post_id:
        type: string
      updated_at:
        type: string
    type: object
  models.ResponseLikePost:
    properties:
      id:
        type: string
      image_url:
        type: string
      likes:
        items:
          $ref: '#/definitions/models.User'
        type: array
      owner_id:
        type: string
      title:
        type: string
    type: object
  models.Status:
    properties:
      liked:
        type: boolean
    type: object
  models.SuperAdminMessage:
    properties:
      message:
        type: string
    type: object
  models.User:
    properties:
      age:
        type: integer
      email:
        type: string
      first_name:
        type: string
      gender:
        type: integer
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  models.UserModel:
    properties:
      access_token:
        type: string
      age:
        type: integer
      email:
        type: string
      first_name:
        type: string
      gender:
        type: integer
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  models.UserWithPostsAndComments:
    properties:
      age:
        type: integer
      email:
        type: string
      first_name:
        type: string
      gender:
        type: integer
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
    type: object
  models.VerifyResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:3030
info:
  contact: {}
  description: microservice
  title: Welcome to services
  version: "1.0"
paths:
  /v1/auth/create:
    post:
      consumes:
      - application/json
      description: Create a new admin if you are a superadmin
      parameters:
      - description: super-username
        in: query
        name: super-username
        required: true
        type: string
      - description: super-password
        in: query
        name: super-password
        required: true
        type: string
      - description: admin
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.AdminReq'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuperAdminMessage'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: create admin
      tags:
      - Auth
  /v1/auth/delete:
    delete:
      consumes:
      - application/json
      description: delete admin if you are a superadmin
      parameters:
      - description: super-username
        in: query
        name: super-username
        required: true
        type: string
      - description: super-password
        in: query
        name: super-password
        required: true
        type: string
      - description: admin
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.DeleteAdmin'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuperAdminMessage'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: delete admin
      tags:
      - Auth
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: login as admin
      parameters:
      - description: Login
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.AdminLoginReq'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AdminLoginResp'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: login
      tags:
      - Auth
  /v1/comment/create:
    post:
      consumes:
      - application/json
      description: Create Comment
      parameters:
      - description: Create Comment
        in: body
        name: CommentInfo
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: create comment
      tags:
      - Comment
  /v1/comment/owner/{id}:
    get:
      consumes:
      - application/json
      description: Get all comments by owner id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comments'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get all comments by owner id
      tags:
      - Comment
  /v1/comment/post/{id}:
    get:
      consumes:
      - application/json
      description: Get all comments by post id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comments'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get all comments by post id
      tags:
      - Comment
  /v1/like/comment:
    post:
      consumes:
      - application/json
      description: Like comment
      parameters:
      - description: Like comment
        in: body
        name: LikeInfo
        required: true
        schema:
          $ref: '#/definitions/models.CommentLike'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: like comment
      tags:
      - Like
  /v1/like/comment/{id}:
    get:
      consumes:
      - application/json
      description: Like owners by comment id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseLikeComment'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: like owners by comment id
      tags:
      - Like
  /v1/like/post:
    post:
      consumes:
      - application/json
      description: Like post
      parameters:
      - description: Like post
        in: body
        name: LikeInfo
        required: true
        schema:
          $ref: '#/definitions/models.PostLike'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: like post
      tags:
      - Like
  /v1/like/post/{id}:
    get:
      consumes:
      - application/json
      description: Like owners by post id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseLikePost'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: like owners by post id
      tags:
      - Like
  /v1/post/create:
    post:
      consumes:
      - application/json
      description: Create Post
      parameters:
      - description: Create Post
        in: body
        name: PostInfo
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RespPost'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: create post
      tags:
      - Post
  /v1/post/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Post
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: delete post
      tags:
      - Post
  /v1/post/get/{id}:
    get:
      consumes:
      - application/json
      description: Get Post
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RespPost'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get post
      tags:
      - Post
  /v1/post/owner/{id}:
    get:
      consumes:
      - application/json
      description: Get Posts by owner id
      parameters:
      - description: owner_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Posts'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get posts by owner id
      tags:
      - Post
  /v1/post/update:
    put:
      consumes:
      - application/json
      description: Update Post
      parameters:
      - description: Create Post
        in: body
        name: PostInfo
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: update post
      tags:
      - Post
  /v1/rbac/add/policy:
    post:
      consumes:
      - application/json
      description: Add policy to a role
      parameters:
      - description: super-username
        in: query
        name: super-username
        required: true
        type: string
      - description: super-password
        in: query
        name: super-password
        required: true
        type: string
      - description: policy
        in: body
        name: policy
        required: true
        schema:
          $ref: '#/definitions/models.AddPolicyRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuperAdminMessage'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: add policy to a role
      tags:
      - RBAC
  /v1/rbac/delete/policy:
    delete:
      consumes:
      - application/json
      description: Delete policy
      parameters:
      - description: super-username
        in: query
        name: super-username
        required: true
        type: string
      - description: super-password
        in: query
        name: super-password
        required: true
        type: string
      - description: policy
        in: body
        name: policy
        required: true
        schema:
          $ref: '#/definitions/models.AddPolicyRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuperAdminMessage'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: delete policy
      tags:
      - RBAC
  /v1/rbac/policies/{role}:
    get:
      consumes:
      - application/json
      description: Get all policies of a role
      parameters:
      - description: super-username
        in: query
        name: super-username
        required: true
        type: string
      - description: super-password
        in: query
        name: super-password
        required: true
        type: string
      - description: role
        in: path
        name: role
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ListRolePolicyResp'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get all policies of a role
      tags:
      - RBAC
  /v1/rbac/roles:
    get:
      consumes:
      - application/json
      description: Get all roles
      parameters:
      - description: super-username
        in: query
        name: super-username
        required: true
        type: string
      - description: super-password
        in: query
        name: super-password
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RbacAllRolesResp'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get all roles
      tags:
      - RBAC
  /v1/user/{id}:
    get:
      consumes:
      - application/json
      description: Get user
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserWithPostsAndComments'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get user by id
      tags:
      - User
  /v1/user/create:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: Create user
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserModel'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: create user
      tags:
      - User
  /v1/user/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: delete user
      tags:
      - User
  /v1/user/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: login user
      tags:
      - User
  /v1/user/refresh:
    post:
      consumes:
      - application/json
      description: get access token updated
      parameters:
      - description: Refresh token
        in: body
        name: RefreshToken
        required: true
        schema:
          $ref: '#/definitions/models.AccessTokenUpdateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AccessTokenUpdateResp'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: update access token
      tags:
      - User
  /v1/user/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details
      parameters:
      - description: Register user
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RegisterRespUser'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: register user
      tags:
      - User
  /v1/user/update:
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: Update User
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: update user
      tags:
      - User
  /v1/user/verify/{email}/{code}:
    get:
      consumes:
      - application/json
      description: Verify a user with code sent to their email
      parameters:
      - description: email
        in: path
        name: email
        required: true
        type: string
      - description: code
        in: path
        name: code
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.VerifyResponse'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: verify user
      tags:
      - User
  /v1/users:
    get:
      consumes:
      - application/json
      description: get all users
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AllUsers'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get all users with posts and comments
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
